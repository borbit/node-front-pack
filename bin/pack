#!/usr/bin/env node

/**
 * TODO:
 * 1) images.json should be placed to a dist dir.
 * 2) convert images to the WEBP format
 */

/**
 * Module dependencies.
 */
var package = require('../package.json')
  , utils = require('../lib/utils')
  , program = require('commander')
  , async = require('async')
  , path = require('path')
  , _ = require('lodash')
  , fs = require('fs');

/**
 * CLI
 */
program
  .version(package.version)
  .usage('[options] [pages]')
  .option('-v, --verbose'    , 'verbose output')
  .option('-m, --mark'       , 'add checksum to processed file names')
  .option('-i, --images'     , 'include all blocks\' images into the package')
  .option('-e, --optimize'   , 'optimize images included into the package')
  .option('-o, --out <path>' , 'package output dir')
  .parse(process.argv);

var cwd = process.cwd();

/**
 * Config
 */
try {
  var cfg = require(path.join(cwd, '/config'));
} catch (err) {
  console.error(" error: cannot find config file");
  process.exit(1);
}

// green tick symbol
var tick = '\033[32mâœ“\033[39m';
// short cut for the utils.log
var log = utils.log;
// short cut for the utils.falog
var falog = utils.falog;

/**
 * Pack
 */
(function() {
  var ver = Date.now().toString();
  var tmpDir = path.join(cfg.TEMPS_ROOT, ver);
  var outDir = path.join(cfg.DISTS_ROOT, ver);
  
  // Explicitly set output dir
  if (program.output) {
    outDir = program.output;
  }

  var scope = {
    tmpDir: tmpDir
  , outDir: outDir
  , cfg: cfg
  };

  var stack = [];

  stack.push(function(scope, cb) {
    fs.mkdir(tmpDir, function(err, pages) {
      if (err) return cb(err);
      log(' %s created temp directory \t\t\t \033[90m%s\033[39m', tick, tmpDir);
      cb();
    });
  });

  stack.push(require('../lib/mw-build'));

  if (program.mark) {
    stack.push(require('../lib/mw-mark'));
  }
  if (program.images) {
    stack.push(require('../lib/mw-images'));
  }
  if (program.images && program.optimize) {
    stack.push(require('../lib/mw-optimize'));
  }

  stack.push(require('../lib/mw-gzip'));

  stack.push(function(scope, cb) {
    createAssetsMapFile(scope.assetsMap, outDir, function(err) {
      if (err) return cb(err);
      log(' %s created assets map file \t\t\t \033[90m%s\033[39m', tick, cfg.ASSETS_MAP_FILE);
      cb();
    });
  });

  stack.push(function(scope, cb) {
    fs.writeFile(cfg.VERSION_FILE, JSON.stringify(ver), function(err) {
      if (err) return cb(err);
      log(' %s created "latest version" file \t\t \033[90m%s\033[39m', tick, cfg.VERSION_FILE);
      cb();
    });
  });

  stack.push(function(scope, cb) {
    fs.mkdir(outDir, function(err) {
      if (err) return cb(err);
      log(' %s created dist directory \t\t\t \033[90m%s\033[39m', tick, outDir);
      cb();
    });
  });

  stack.push(function(scope, cb) {
    moveFilesToDist(tmpDir, outDir, function(err) {
      if (err) return cb(err);
      log(' %s moved files to the dist directory \t\t \033[90m%s\033[39m', tick, outDir);
      cb();
    });
  });

  stack.push(function(scope, cb) {
    utils.removeDir(tmpDir, function(err) {
      if (err) return cb(err);
      log(' %s removed tmp directory  \t\t\t \033[90m%s\033[39m', tick, tmpDir);
      cb();
    });
  });
  
  async.forEachSeries(stack, function(mw, cb) {
    mw(scope, cb);
  }, function(err) {
    if (err) {
      console.error(' error: %s', err.message);
      process.exit(1);
    }
    log(' done!');
    process.exit();
  });
})();

/*
 *
 */
function createAssetsMapFile(assetsMap, distDir, cb) {
  var map = {};

  _.each(assetsMap, function(assets, page) {
    var css = {}, js = {};

    _.each(assets.css, function(asset, group) {
      css[group] = path.basename(asset);
    });
    _.each(assets.js, function(asset, group) {
      js[group] = path.basename(asset);
    });

    map[page] = {};

    if (_.size(css))
      map[page].css = css;
    if (_.size(js))
      map[page].js = js;
  });

  // TODO: Tmp solution for moving assets map file out of site_media dir
  fs.writeFile(cfg.ASSETS_MAP_FILE, JSON.stringify(map), cb);
}

/*
 *
 */
function moveFilesToDist(tempDir, distDir, cb) {
  async.waterfall([
    function(cb) {
      fs.readdir(tempDir, cb);
    },
    function(files, cb) {
      async.forEach(files, function(file, cb) {
        fs.rename(
          path.join(tempDir, file)
        , path.join(distDir, file)
        , cb);
      }, cb);
    }
  ], cb)
}